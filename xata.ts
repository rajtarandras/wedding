// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type { BaseClientOptions, SchemaInference, XataRecord } from "@xata.io/client";

export const tables = [
	{
		name: "participations",
		columns: [
			{ name: "email", type: "string", unique: true },
			{ name: "first_name", type: "string", notNull: true, defaultValue: "" },
			{ name: "last_name", type: "string", notNull: true, defaultValue: "" },
			{ name: "infants", type: "int", notNull: true, defaultValue: "0" },
			{ name: "children", type: "int", notNull: true, defaultValue: "0" },
			{ name: "adults", type: "int", notNull: true, defaultValue: "0" },
			{
				name: "lactose_intolerance",
				type: "bool",
				notNull: true,
				defaultValue: "false",
			},
			{
				name: "gluten_intolerance",
				type: "bool",
				notNull: true,
				defaultValue: "false",
			},
			{
				name: "participant_names",
				type: "string",
				notNull: true,
				defaultValue: "",
			},
			{ name: "other_intolerance", type: "string" },
		],
	},
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Participations = InferredTypes["participations"];
export type ParticipationsRecord = Participations & XataRecord;

export type DatabaseSchema = {
	participations: ParticipationsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
	databaseURL: "https://rajtarandras-s-workspace-03rl3u.eu-west-1.xata.sh/db/wedding",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
	constructor(options?: BaseClientOptions) {
		super({ ...defaultOptions, ...options }, tables);
	}
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
	if (instance) return instance;

	instance = new XataClient();
	return instance;
};
